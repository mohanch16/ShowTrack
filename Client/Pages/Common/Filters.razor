@using ShowTrack.Shared.Models
@using ShowTrack.Shared.Extensions
@using ShowTrack.Shared.Models.AsyncFilters
@using ShowTrack.Components.Common

@namespace ShowTrack.Components.Common

<div class="border my-4 px-4 py-2 rounded-lg shadow-sm">
    <MudItem Class="d-flex align-items-center">
        <MudIcon Icon="@Icons.Filled.FilterList" Color="Color.Dark" />
        <MudText Typo="Typo.h6" Class="mx-2">Filters</MudText>
        <MudIcon Icon="@Icons.Filled.FilterAlt" Color="Color.Dark" />
    </MudItem>

    <div class="d-flex justify-content-between flex-wrap gap-3 my-2">
        
        <div class="d-flex gap-3 flex-wrap">
            <div class="col-sm-10 col-md-8 col-lg-5">
                <MultiSelectComponent Config="selectedShowTypes"                   
                    DropDownList="showTypes" Label="Show type"                     
                    ConfigChanged="@OnShowTypeSelectionChanged">
                </MultiSelectComponent>
            </div>
            <div class="col-sm-10 col-md-8 col-lg-5">
                <MultiSelectComponent Config="selectedSubscriptionTypes"
                    DropDownList="subscriptionTypes" Label="Subscriptions"                      
                    ConfigChanged="@OnSubscriptionTypeSelectionChanged">
                </MultiSelectComponent>
            </div>
        </div>

        <div class="search-bar d-flex align-items-center gap-3">            
            <MudTextField @bind-Value="@searchString" 
                Label="Search by title" Variant="Variant.Outlined" 
                Adornment="Adornment.End" Placeholder="Search for shows.."
                AdornmentIcon="@Icons.Filled.Search"  />            
        </div>

        <div class="d-flex align-items-center gap-3 justify-content-end">
            <MudFab EndIcon="@Icons.Filled.FilterListOff" Label="Clear" 
                Class="border-secondary text-secondary" Size="Size.Large" 
                Color="Color.Default"
                OnClick="() => RefreshFilters()" Variant="Variant.Outlined"  />

            <MudFab EndIcon="@Icons.Filled.FilterList" Label="Apply" 
                Class="bg-secondary text-white" Size="Size.Large" 
                OnClick="() => OnApplyFilters.InvokeAsync(searchString)" />
        </div>

    </div>
</div>

@code {
    public List<FilterItem> showTypes { get; set; } = new List<FilterItem>();
    public List<FilterItem> subscriptionTypes { get; set; } = new List<FilterItem>();
        
    public List<FilterItem> selectedShowTypes { get; set; } = new List<FilterItem>();
    public List<FilterItem> selectedSubscriptionTypes { get; set; } = new List<FilterItem>();
        
    [Parameter] 
    public string? searchString { get; set; }
    
    [Parameter]
    public EventCallback<string> OnApplyFilters { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.BuildFilterItems();
    }
    
    public void OnShowTypeSelectionChanged(List<FilterItem> updatedValues)
    {
        updatedValues.ToList().ForEach(fi => Console.WriteLine(fi.Name));  
    }

    public void OnSubscriptionTypeSelectionChanged(List<FilterItem> updatedValues) 
    {
        updatedValues.ToList().ForEach(fi => Console.WriteLine(fi.Name));  
    }

    private void RefreshFilters()
    {
        this.selectedShowTypes = new List<FilterItem>();
        this.selectedSubscriptionTypes = new List<FilterItem>();
    }

    private void BuildFilterItems() 
    {
        var _showTypes = Extensions.GetFilteredEnumValues<ShowType>(
            excludeItems: new ShowType[] { ShowType.None }).ToList();
        _showTypes.ForEach(showType => 
        {
            this.showTypes.Add(new FilterItem 
            {
                Name = showType.Description(),
                Value = (int)showType,
            });
        });

        var _subscriptionTypes = Extensions.GetFilteredEnumValues<SubscriptionType>(
            excludeItems: new SubscriptionType[] { SubscriptionType.None }).ToList();
        _subscriptionTypes.ForEach(subscriptionType => 
        {
            this.subscriptionTypes.Add(new FilterItem 
            {
                Name = subscriptionType.Description(),
                Value = (int)subscriptionType,
            });
        });

        this.selectedShowTypes = new List<FilterItem>(this.showTypes);
        this.selectedSubscriptionTypes = new List<FilterItem>(this.subscriptionTypes);
    }
}