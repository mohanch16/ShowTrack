@using ShowTrack.Shared.Models
@using ShowTrack.Shared.Extensions
@using ShowTrack.Shared.Models.AsyncFilters
@using ShowTrack.Components.Common

@namespace ShowTrack.Components.Common

<div class="my-4">
    <MudExpansionPanels>
        <MudExpansionPanel>

            <TitleContent>
                <MudItem Class="d-flex align-items-center">
                    <MudIcon Icon="@Icons.Filled.FilterList" Color="Color.Dark" />
                    <MudText Typo="Typo.h6" Class="mx-2">Filters</MudText>
                    <MudIcon Icon="@Icons.Filled.FilterAlt" Color="Color.Dark" />
                </MudItem>
            </TitleContent>

            <ChildContent>
                <div class="d-flex justify-content-between flex-wrap gap-3 my-3">
                    
                    <div class="d-flex gap-3 flex-wrap">
                    
                        <div>
                            <MudSelect T="@FilterItem" MultiSelection="true" 
                                SelectAll="true" SelectAllText="Select all" 
                                @bind-SelectedValues="FilterOptions.SelectedShowTypes"
                                ToStringFunc="@converter" Label="Shows type" 
                                AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable>
                                @foreach (var filterListItem in showTypes) 
                                {
                                    <MudSelectItem Value="@filterListItem" />
                                }
                            </MudSelect>
                        </div>

                        <div>
                            <MudSelect T="@FilterItem" MultiSelection="true" 
                                SelectAll="true" SelectAllText="Select all" 
                                @bind-SelectedValues="FilterOptions.SelectedSubscriptions"
                                ToStringFunc="@converter" Label="Subscripitons" 
                                AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable>
                                @foreach (var filterListItem in subscriptionTypes) 
                                {
                                    <MudSelectItem Value="@filterListItem" />
                                }
                            </MudSelect>
                        </div>
                    </div>

                    <MudTextField Class="flex-grow-1" @bind-Value="@FilterOptions.SearchString" 
                        Label="Search by title" Variant="Variant.Outlined" 
                        Adornment="Adornment.End" Placeholder="Search for shows.."
                        AdornmentIcon="@Icons.Filled.Search"  />        

                </div>

                <div class="d-flex align-items-center gap-3 justify-content-end mb-1">
                    <MudFab EndIcon="@Icons.Filled.FilterListOff" Label="Clear" 
                        Class="border-secondary text-secondary" Size="Size.Large" 
                        Color="Color.Default"
                        OnClick="() => FilterOptions.ResetFilters()" Variant="Variant.Outlined"  />

                    <MudFab EndIcon="@Icons.Filled.FilterList" Label="Apply" 
                        Class="bg-secondary text-white" Size="Size.Large" 
                        OnClick="() => SubmitFilterOptions()" />
                </div>

            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>

</div>

@code {
    public List<FilterItem> showTypes { get; set; } = new List<FilterItem>();
    public List<FilterItem> subscriptionTypes { get; set; } = new List<FilterItem>();
    
    [Parameter]
    public FilterOptions FilterOptions { get; set; } = new FilterOptions();
    
    [Parameter]
    public EventCallback<FilterOptions> OnApplyFilters { get; set; }
    
    Func<FilterItem, string> converter = p => p?.Name!;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.BuildFilterItems();
    }

    private async Task SubmitFilterOptions()
    {
        // TODO: Adding validations [invoking callback function if only filters are changed].   
        await this.OnApplyFilters.InvokeAsync(this.FilterOptions);
    }

    private void BuildFilterItems() 
    {
        this.BuildShowTypeFilters();
        this.BuildSubscriptionFilters();
    }       

    private void BuildShowTypeFilters()
    {
        var excludeShowTypes = new ShowType[] { ShowType.None };
        var _showTypes = Extensions.GetFilteredEnumValues<ShowType>(excludeShowTypes).ToList();
        _showTypes.ForEach(showType => 
        {
            this.showTypes.Add(new FilterItem 
            {
                Name = showType.Description(),
                Value = (int)showType,
            });
        });

        this.FilterOptions.SelectedShowTypes = new List<FilterItem>(this.showTypes);        
    }

    private void BuildSubscriptionFilters()
    {
        var excludeSubscriptions = new SubscriptionType[] { SubscriptionType.None };        
        var _subscriptionTypes = Extensions.GetFilteredEnumValues<SubscriptionType>(excludeSubscriptions).ToList();
        _subscriptionTypes.ForEach(subscriptionType => 
        {
            this.subscriptionTypes.Add(new FilterItem 
            {
                Name = subscriptionType.Description(),
                Value = (int)subscriptionType,
            });
        });

        this.FilterOptions.SelectedSubscriptions = new List<FilterItem>(this.subscriptionTypes);
    }
}