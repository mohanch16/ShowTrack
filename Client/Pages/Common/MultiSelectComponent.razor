@using ShowTrack.Shared.Models.AsyncFilters

@namespace ShowTrack.Components.Common

<MudSelect T="@FilterItem" MultiSelection="true" 
    SelectAll="true" SelectAllText="Select all" 
    SelectedValues="new HashSet<FilterItem>(Config)"
    SelectedValuesChanged="ConfigChanged"
    ToStringFunc="@converter" Label="@Label" 
    AnchorOrigin="Origin.BottomCenter" 
    Variant="Variant.Outlined" Clearable>
    @foreach (var filterListItem in DropDownList) 
    {
        <MudSelectItem Value="@filterListItem" />
    }
</MudSelect>

@code {
    [Parameter]
    public List<FilterItem> Config { get; set; } = null!;
    
    [Parameter]
    public List<FilterItem> DropDownList { get; set; } = null!;
    
    [Parameter]
    public string Label { get; set; } = null!;

    [Parameter]
    public EventCallback<IEnumerable<FilterItem>> ConfigChanged { get; set; }
    
    private void SelectedValuesChanged(HashSet<FilterItem> val) {
        var v = new List<FilterItem>(val);
        Config = v; 
        this.ConfigChanged.InvokeAsync(Config);        
    }

    Func<FilterItem, string> converter = p => p?.Name!;
}