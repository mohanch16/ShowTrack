@page "/shows"
@using ShowTrack.Shared.Models
@using ShowTrack.Shared.Models.AsyncFilters
@using ShowTrack.Components.Common
@using System.Text.Json
@inject HttpClient Http

@namespace ShowTrack.Components.Shows

@if (shows == null)
{
    <p><em>Loading...</em></p>    
}
else
{ 
    <Filters FilterOptions="@FilterOptions" OnApplyFilters="@SearchShows" />

    <MudPaper Elevation="2" Class="p-4 mb-4">
        <div class="d-flex flex-wrap gap-3">
            @foreach (var show in shows)
            {
                <ShowListItem show="@show" />
            }

            @if (shows.Count() == 0)
            {
                <MudAlert Severity="Severity.Info" Class="flex-grow-1">
                    No results found.
                </MudAlert>
            }
        </div>
        @if (shows.Count() > 0)
        {
            <div class="d-flex flex-column align-center">
                <MudPagination ShowFirstButton="true" 
                    ShowLastButton="true" Class="mt-4"
                    Count="@PaginationOptions.TotalNumberOfPages" 
                    @bind-Selected="@PaginationOptions.CurrentPageNumber" />
            </div>
        }
    </MudPaper>
}

@code {
    [Parameter]
    public ShowType ShowType { get; set; } = ShowType.None;
    
    public FilterOptions FilterOptions { get; set; } = new FilterOptions();

    private PagedResult PagedResult { get; set; } = new PagedResult();
    
    private PaginationOptions PaginationOptions { get; set; } = new PaginationOptions();
    
    private ShowDTO[]? shows;

    protected override async Task OnInitializedAsync()
    {
        this.InitPagedResultsOptions();
        await this.GetShowsCount();
        await this.GetShows();
    }

    public async Task SearchShows(FilterOptions filterOptions) 
    {        
        var filterOptionsDTO = filterOptions.BuildDataTransferObject();        
        // Console.WriteLine(JsonSerializer.Serialize(filterOptions));
        
        // TODO: Verifying filters / pagination options changed/pristine.
        this.PagedResult.FilterOptionsDTO = filterOptionsDTO;
        this.InitPagedResultsOptions();
        
        await this.GetShowsCount();
        await this.GetShows();
    }

    private async Task GetShows()
    {
        try
        {
            var response = await Http.PostAsJsonAsync<PagedResult>($"api/Shows/pagedresult", this.PagedResult);
            this.shows = await response.Content.ReadFromJsonAsync<ShowDTO[]>();            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occured while reading data: ", ex.ToString());
            throw;
        }
    }

    private async Task GetShowsCount()
    {
        try
        {
            var response = await Http.PostAsJsonAsync<FilterOptionsDTO>($"api/Shows/pagedresultcount", this.PagedResult.FilterOptionsDTO);
            var recordsCount = await response.Content.ReadFromJsonAsync<long>();
            this.PaginationOptions.TotalRecordsCount = recordsCount;        
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occured while reading data: ", ex.ToString());
            throw;
        }
    }

    private void InitPagedResultsOptions()
    {
        if (this.ShowType != ShowType.None)
        {
            this.PagedResult.FilterOptionsDTO.SelectedShowTypes = new List<ShowType> { this.ShowType };
        }

        this.PagedResult.PageNumber = this.PaginationOptions.CurrentPageNumber; 
        this.PagedResult.PageSize = this.PaginationOptions.PageSize; 
    }
}
