@page "/shows"
@using ShowTrack.Shared.Models
@using ShowTrack.Shared.Models.AsyncFilters
@using ShowTrack.Components.Common
@using System.Text.Json
@inject HttpClient Http

@namespace ShowTrack.Components.Shows

@if (shows == null)
{
    <p><em>Loading...</em></p>    
}
else
{ 
    <Filters FilterOptions="@FilterOptions" 
        HideShowType="@(@ShowType != ShowType.None)"
        OnApplyFilters="@SearchShows" />

    <MudPaper Elevation="2" Class="p-4 mb-4">
        <div class="d-flex flex-wrap gap-3">
            @foreach (var show in shows)
            {
                <ShowListItem show="@show" />
            }

            @if (shows.Count() == 0)
            {
                <MudAlert Severity="Severity.Info" Class="flex-grow-1">
                    No results found.
                </MudAlert>
            }
        </div>
        @if (shows.Count() > 0)
        {
            <div class="d-flex flex-wrap justify-content-between mt-5">           
               <div>
                    <MudSelect T="int"Variant="Variant.Outlined" 
                        Label="Number of shows per page" 
                        AnchorOrigin="Origin.BottomCenter"
                        Value="@PaginationOptions.PageSize" 
                        ValueChanged="UpdatePageSize">
                        @foreach (var pageSize in pageSizeDropDownOptions)
                        {
                            <MudSelectItem T="int" Value="@pageSize"/>   
                        }
                    </MudSelect>
                </div>
                <div class="pb-2">
                    <MudPagination ShowFirstButton="true" 
                        ShowLastButton="true" Class="mt-4" Size="Size.Medium" 
                        Count="@PaginationOptions.TotalNumberOfPages" 
                        Selected="@PaginationOptions.CurrentPageNumber"
                        SelectedChanged="@UpdatePageNumber" />
                </div>
            </div>
        }
    </MudPaper>
}

@code {
    [Parameter]
    public ShowType ShowType { get; set; } = ShowType.None;
    
    public FilterOptions FilterOptions { get; set; } = new FilterOptions();

    private PagedResult PagedResult { get; set; } = new PagedResult();
    
    private PaginationOptions PaginationOptions { get; set; } = new PaginationOptions();
    
    private ShowDTO[]? shows;

    private static int[] pageSizeDropDownOptions = new [] { 5, 10, 20, 30, 50 };

    protected override async Task OnInitializedAsync()
    {
        await this.LoadData();
    }

    public async Task SearchShows(FilterOptions filterOptions) 
    {        
        var filterOptionsDTO = filterOptions.BuildDataTransferObject();        
        // Console.WriteLine(JsonSerializer.Serialize(filterOptions));
        
        // TODO: Verifying whether filters / pagination options changed, or pristine.
        this.PagedResult.FilterOptionsDTO = filterOptionsDTO;
        
        // resetting page-number when filters are changed
        this.PaginationOptions.CurrentPageNumber = 1; 
        
        await this.LoadData();
    }

    private async Task LoadData()
    {
        this.InitPagedResultsOptions();
        await this.GetShowsCount();
        await this.GetShows();
    }

    private async Task GetShows()
    {
        try
        {
            var response = await Http.PostAsJsonAsync<PagedResult>($"api/Shows/PagedResult", this.PagedResult);
            this.shows = await response.Content.ReadFromJsonAsync<ShowDTO[]>();            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occured while reading data: ", ex.ToString());
            throw;
        }
    }

    private async Task GetShowsCount()
    {
        try
        {
            var response = await Http.PostAsJsonAsync<FilterOptionsDTO>($"api/Shows/PagedResultCount", this.PagedResult.FilterOptionsDTO);
            var recordsCount = await response.Content.ReadFromJsonAsync<long>();
            this.PaginationOptions.TotalRecordsCount = recordsCount;        
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occured while reading data: ", ex.ToString());
            throw;
        }
    }

    private async void UpdatePageSize(int newSelection)
    {
        var selectedValue = newSelection;
        this.PaginationOptions.PageSize = Convert.ToInt32(selectedValue);
        await this.LoadData();
        StateHasChanged();
    }

    private async void UpdatePageNumber(int newSelection)
    {
        var selectedPageNumber = newSelection;
        this.PaginationOptions.CurrentPageNumber = Convert.ToInt32(selectedPageNumber);
        await this.LoadData();
        StateHasChanged();
    }

    private void InitPagedResultsOptions()
    {
        if (this.ShowType != ShowType.None)
        {
            this.PagedResult.FilterOptionsDTO.SelectedShowTypes = new List<ShowType> { this.ShowType };
        }

        this.PagedResult.PageNumber = this.PaginationOptions.CurrentPageNumber; 
        this.PagedResult.PageSize = this.PaginationOptions.PageSize; 
    }
}
